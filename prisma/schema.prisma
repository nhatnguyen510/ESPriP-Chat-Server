// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  password  String
  first_name String
  last_name  String
  email     String   @unique
  is_verified Boolean @default(false)
  master_key String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens Token[]
  friendsRequestedUser Friend[] @relation("FriendRequestedUser")
  friendsAcceptedUser Friend[] @relation("FriendAcceptedUser")
  conversations Conversation[] @relation("ConversationParticipants", fields: [conversationIds], references: [id])
  conversationIds String[] @db.ObjectId
  messages Message[] @relation("MessageSender")


  @@map("users")
  
}

model Token {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  userId       String  @db.ObjectId
  refreshToken String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model Conversation {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  participants        User[]              @relation("ConversationParticipants", fields: [participantsIds], references: [id])
  participantsIds     String[]            @db.ObjectId
  encrypted_session_key String?
  lastMessageId       String?   
  lastMessageAt       DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  messages            Message[]           @relation("ConversationMessages")

  @@map("conversations")
}

model Message {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  conversation        Conversation        @relation("ConversationMessages", fields: [conversationId], references: [id])
  conversationId      String  @db.ObjectId
  sender              User                @relation("MessageSender", fields: [senderId], references: [id])
  senderId            String  @db.ObjectId
  message             String
  seen                Boolean             @default(false)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  @@map("messages")
  
}

model Friend {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  requestedUser           User?               @relation("FriendRequestedUser", fields: [requestedUserId], references: [id])
  acceptedUser            User?               @relation("FriendAcceptedUser", fields: [acceptedUserId], references: [id])
  status                  String
  requestedUserId         String  @db.ObjectId
  acceptedUserId          String  @db.ObjectId
  requestedUserPublicKey  String?
  acceptedUserPublicKey   String?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt

  @@map("friends")
}




